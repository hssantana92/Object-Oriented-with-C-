#pragma once
#ifndef TRIGRAMS_H
#define TRIGRAMS_H

#include <array>
#include "RealWords.h"

using namespace std;
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

// Class Name: Trigrams - Written by: Hugo Santana (SID# 10511804)

// Summary: This class will hold and create a vector of 'real' word objects. To be independet of the Dictionary_Part01 class, this class will load the words of the
// dictionary2021.txt file and also create a string of every 6th word in that file (to speed up loading times). We still obtain a sufficient trigram counter to 
// generate 10 english words from most combinations of two chars but also save processing time by only using 1/6th of the words available. In the case where
// 10 words are not generated, this class will ask for another input of two chars until 10 words are generated.

// Inputs: Inherits from the RealWords class
// Outputs: 10 words which sound like but are not english words.

class Trigrams : public RealWords {

// Date of Creation: 21/05/21

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
private:
	RealWords realWord;
	string words;
	vector<RealWords> realWordsVector;
	int charCount[27][27][27] = { 0 };
public:
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

// Method Name: getWords - Written by: Hugo Santana (SID# 10511804)

// Summary: Getter for the words string 

// Inputs: None
// Outputs: String

// Date of Creation: 21/05/21

	string getWords();

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

// Method Name: setWords - Written by: Hugo Santana (SID# 10511804)

// Summary: Setter for the words string 

// Inputs: String
// Outputs: None

// Date of Creation: 21/05/21

	void setWords(string word);

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

// Method Name: main - Written by: Hugo Santana (SID# 10511804)

// Summary: This method runs the various methods in this class to generate 10 random words

// Inputs: None
// Outputs: 10 random sounding english words

// Date of Creation: 21/05/21

	void main();

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

// Method Name: mostLikelyLetters - Written by: Hugo Santana (SID# 10511804)

// Summary: This method will return an array consisting of 3 of the most occuring chars found from a user input

// Inputs: String (2 chars of the english alphabet)
// Outputs: Array (3 most occuring chars found after the 2 chars of the user input)

// Date of Creation: 21/05/21

	array<char, 3> mostLikelyLetters(string inputChars);

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

// Method Name: returnIndex - Written by: Hugo Santana (SID# 10511804)

// Summary: This method will take an input char and return the index of this char between 0 and 26. If the char is a space or -, the index returned will be 0

// Inputs: Char
// Outputs: int (char index between 0 and 26)

// Date of Creation: 21/05/21

	int returnIndex(char a);

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

// Method Name: threeDArray - Written by: Hugo Santana (SID# 10511804)

// Summary: This method will increment the trigram counter/3d array by calling iterating through the entire 'words' string and calling the returnIndex function

// Inputs: None
// Outputs: Incremented trigram counter

// Date of Creation: 21/05/21

	void threeDArray();

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

// Method Name: loadWords - Written by: Hugo Santana (SID# 10511804)

// Summary: This method will take an input filename and load the contents of that file into a vector of real words and string of every 6th word to use the trigrams
// counter on.

// Inputs: string (txt filename)
// Outputs: Load 'real' words and every 6th word of the txt file in a vector and string

// Date of Creation: 21/05/21

	void loadWords(string filename);

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
};

#endif
